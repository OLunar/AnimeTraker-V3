{"version":3,"sources":["service-worker.js"],"names":["CACHE_NAME","urlsToCache","self","addEventListener","event","waitUntil","caches","open","then","cache","console","log","addAll","respondWith","match","request","response","fetch","fetchResponse","put","clone","catch","error","cacheWhitelist","keys","cacheNames","Promise","all","map","cacheName","includes","delete"],"mappings":"AAAA,IAAMA,UAAU,GAAG,kBAAkB;AACrC,IAAMC,WAAW,GAAG,CAClB,GAAG,EACH,aAAa,EACb,cAAc,EACd,YAAY,EACZ,SAAS,EACT,gBAAgB,EAChB,kFAAkF,EAClF,gFAAgF,EAChF,2BAA2B,EAC3B,6BAA6B,CAC9B;;AAED;AACAC,IAAI,CAACC,gBAAgB,CAAC,SAAS,EAAE,UAAAC,KAAK,EAAI;EACxCA,KAAK,CAACC,SAAS,CACbC,MAAM,CAACC,IAAI,CAACP,UAAU,CAAC,CACpBQ,IAAI,CAAC,UAAAC,KAAK,EAAI;IACbC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3B,OAAOF,KAAK,CAACG,MAAM,CAACX,WAAW,CAAC;EAClC,CAAC,CACL,CAAC;AACH,CAAC,CAAC;;AAEF;AACAC,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAE,UAAAC,KAAK,EAAI;EACtCA,KAAK,CAACS,WAAW,CACfP,MAAM,CAACQ,KAAK,CAACV,KAAK,CAACW,OAAO,CAAC,CAC1BP,IAAI,CAAC,UAAAQ,QAAQ,EAAI;IAChB,OAAOA,QAAQ,IAAIC,KAAK,CAACb,KAAK,CAACW,OAAO,CAAC,CAACP,IAAI,CAAC,UAAAU,aAAa,EAAI;MAC5D,OAAOZ,MAAM,CAACC,IAAI,CAACP,UAAU,CAAC,CAACQ,IAAI,CAAC,UAAAC,KAAK,EAAI;QAC3CA,KAAK,CAACU,GAAG,CAACf,KAAK,CAACW,OAAO,EAAEG,aAAa,CAACE,KAAK,CAAC,CAAC,CAAC;QAC/C,OAAOF,aAAa;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC,CACDG,KAAK,CAAC,UAAAC,KAAK,EAAI;IACdZ,OAAO,CAACY,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC;IACA,OAAOhB,MAAM,CAACQ,KAAK,CAAC,eAAe,CAAC;EACtC,CAAC,CACH,CAAC;AACH,CAAC,CAAC;;AAEF;AACAZ,IAAI,CAACC,gBAAgB,CAAC,UAAU,EAAE,UAAAC,KAAK,EAAI;EACzC,IAAMmB,cAAc,GAAG,CAACvB,UAAU,CAAC;EACnCI,KAAK,CAACC,SAAS,CACbC,MAAM,CAACkB,IAAI,CAAC,CAAC,CAAChB,IAAI,CAAC,UAAAiB,UAAU,EAAI;IAC/B,OAAOC,OAAO,CAACC,GAAG,CAChBF,UAAU,CAACG,GAAG,CAAC,UAAAC,SAAS,EAAI;MAC1B,IAAI,CAACN,cAAc,CAACO,QAAQ,CAACD,SAAS,CAAC,EAAE;QACvC,OAAOvB,MAAM,CAACyB,MAAM,CAACF,SAAS,CAAC;MACjC;IACF,CAAC,CACH,CAAC;EACH,CAAC,CACH,CAAC;AACH,CAAC,CAAC","file":"service-worker.js","sourceRoot":"..","sourcesContent":["const CACHE_NAME = 'anime-tracker-v3';\r\nconst urlsToCache = [\r\n  '/',\r\n  '/index.html',\r\n  'offline.html',\r\n  '/style.css',\r\n  '/app.js',\r\n  '/manifest.json',\r\n  'https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css',\r\n  'https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js', \r\n  '/src/firebase/firebase.js', \r\n  '/src/indexeddb/indexeddb.js'\r\n];\r\n\r\n// Install the service worker and cache specified resources\r\nself.addEventListener('install', event => {\r\n  event.waitUntil(\r\n    caches.open(CACHE_NAME)\r\n      .then(cache => {\r\n        console.log('Opened cache');\r\n        return cache.addAll(urlsToCache);\r\n      })\r\n  );\r\n});\r\n\r\n// Fetch event: cache-first strategy with fallback to network\r\nself.addEventListener('fetch', event => {\r\n  event.respondWith(\r\n    caches.match(event.request)\r\n    .then(response => {\r\n      return response || fetch(event.request).then(fetchResponse => {\r\n        return caches.open(CACHE_NAME).then(cache => {\r\n          cache.put(event.request, fetchResponse.clone());\r\n          return fetchResponse;\r\n        });\r\n      });\r\n    })\r\n    .catch(error => {\r\n      console.error('Fetching failed:', error);\r\n      //Fallback to offline page\r\n      return caches.match('/offline.html');\r\n    })\r\n  );\r\n});\r\n\r\n// Activate event: update the service worker and clear old caches\r\nself.addEventListener('activate', event => {\r\n  const cacheWhitelist = [CACHE_NAME];\r\n  event.waitUntil(\r\n    caches.keys().then(cacheNames => {\r\n      return Promise.all(\r\n        cacheNames.map(cacheName => {\r\n          if (!cacheWhitelist.includes(cacheName)) {\r\n            return caches.delete(cacheName);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n});\r\n"]}